#!/usr/bin/python3

import argparse
import time
import json
import pickle

import numpy as np
from keras.utils import multi_gpu_model
from keras.models import load_model
import tensorflow as tf
from keras import backend as K
import cv2

from utils import apply_color_map
from utils import MapillaryGenerator

parser = argparse.ArgumentParser()
parser.add_argument('--checkpoint', type=str, default=None, help='path to model checkpoint')
parser.add_argument('--test_image', type=str, default='output/input_sample.jpg', help='path to input test image')
parser.add_argument('-r', '--remap', action='store_true')
opt = parser.parse_args()

print(opt)

#### Test ####

# Workaround to forbid tensorflow from crashing the gpu
config = K.tf.ConfigProto()
config.gpu_options.allow_growth = True
sess = K.tf.Session(config=config)
K.set_session(sess)
# Model
if opt.checkpoint:
    net = load_model(opt.checkpoint, custom_objects={'tf':tf})
else:
    print('No checkpoint specified! Set it with the --checkpoint argument option')
    exit()

# Testing
image_width = int(net.inputs[0].shape[2])
image_height = int(net.inputs[0].shape[1])


if opt.remap:
    with open('custom_labels.pkl', 'rb') as f:
        labels = pickle.load(f)
    with open('remap.pkl', 'rb') as f:
        remap = pickle.load(f)
else:
    with open('datasets/mapillary/config.json') as config_file:
        config = json.load(config_file)
    labels = config['labels']
    remap = None

generator = MapillaryGenerator(batch_size=1, crop_shape=(image_width, image_height), remap=remap)

start_time = time.time()
count = 0
max_count = 500
for x, y_true in generator:
    y = net.predict_on_batch(x)
    iou, opt = tf.metrics.mean_iou(
    output = apply_color_map(np.argmax(y[0][0], axis=-1), labels)
    cv2.imwrite('samples/' + str(count) + 'x.png', x[0])
    cv2.imwrite('samples/' + str(count) + 'y.png', cv2.resize(output, (image_width, image_height))[...,::-1])
    count += 1
    score, opt = tf.metrics.mean_iou(y_true, y_pred, 66)
    K.get_session().run(tf.local_variables_initializer())
    tf.global_variables_initializer.run()
    tf.local_variables_initializer().run()
    opt.eval()
    print(iou.eval())
    if count > max_count:
        break
duration = time.time() - start_time

print('Generated segmentations in %s seconds -- %s FPS' % (duration, float(max_count)/duration))

###############
